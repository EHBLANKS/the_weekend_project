// Code generated by mockery v2.53.3. DO NOT EDIT.

package dbmocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	racing "racing/proto/racing"
)

// RacesRepo is an autogenerated mock type for the RacesRepo type
type RacesRepo struct {
	mock.Mock
}

// List provides a mock function with given fields: ctx, filter, sortBy, direction
func (_m *RacesRepo) List(ctx context.Context, filter *racing.ListRacesRequestFilter, sortBy racing.SortBy, direction racing.SortDirection) ([]*racing.Race, error) {
	ret := _m.Called(ctx, filter, sortBy, direction)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*racing.Race
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *racing.ListRacesRequestFilter, racing.SortBy, racing.SortDirection) ([]*racing.Race, error)); ok {
		return rf(ctx, filter, sortBy, direction)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *racing.ListRacesRequestFilter, racing.SortBy, racing.SortDirection) []*racing.Race); ok {
		r0 = rf(ctx, filter, sortBy, direction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*racing.Race)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *racing.ListRacesRequestFilter, racing.SortBy, racing.SortDirection) error); ok {
		r1 = rf(ctx, filter, sortBy, direction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRacesRepo creates a new instance of RacesRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRacesRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *RacesRepo {
	mock := &RacesRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
