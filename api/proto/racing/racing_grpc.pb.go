// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package racing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RacingServiceClient is the client API for RacingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RacingServiceClient interface {
	// ListRaces returns a list of all races.
	ListRaces(ctx context.Context, in *ListRacesRequest, opts ...grpc.CallOption) (*ListRacesResponse, error)
}

type racingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRacingServiceClient(cc grpc.ClientConnInterface) RacingServiceClient {
	return &racingServiceClient{cc}
}

func (c *racingServiceClient) ListRaces(ctx context.Context, in *ListRacesRequest, opts ...grpc.CallOption) (*ListRacesResponse, error) {
	out := new(ListRacesResponse)
	err := c.cc.Invoke(ctx, "/racing.RacingService/ListRaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RacingServiceServer is the server API for RacingService service.
// All implementations must embed UnimplementedRacingServiceServer
// for forward compatibility
type RacingServiceServer interface {
	// ListRaces returns a list of all races.
	ListRaces(context.Context, *ListRacesRequest) (*ListRacesResponse, error)
	mustEmbedUnimplementedRacingServiceServer()
}

// UnimplementedRacingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRacingServiceServer struct {
}

func (UnimplementedRacingServiceServer) ListRaces(context.Context, *ListRacesRequest) (*ListRacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRaces not implemented")
}
func (UnimplementedRacingServiceServer) mustEmbedUnimplementedRacingServiceServer() {}

// UnsafeRacingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RacingServiceServer will
// result in compilation errors.
type UnsafeRacingServiceServer interface {
	mustEmbedUnimplementedRacingServiceServer()
}

func RegisterRacingServiceServer(s grpc.ServiceRegistrar, srv RacingServiceServer) {
	s.RegisterService(&RacingService_ServiceDesc, srv)
}

func _RacingService_ListRaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RacingServiceServer).ListRaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/racing.RacingService/ListRaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RacingServiceServer).ListRaces(ctx, req.(*ListRacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RacingService_ServiceDesc is the grpc.ServiceDesc for RacingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RacingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "racing.RacingService",
	HandlerType: (*RacingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRaces",
			Handler:    _RacingService_ListRaces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "racing/racing.proto",
}
